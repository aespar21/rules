% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/C5_rules.R
\name{C5_rules}
\alias{C5_rules}
\alias{update.C5_rules}
\title{General Interface for C5.0 Rule-Based Classification Models}
\usage{
C5_rules(mode = "classification", trees = NULL, min_n = NULL)

\method{update}{C5_rules}(
  object,
  parameters = NULL,
  trees = NULL,
  min_n = NULL,
  fresh = FALSE,
  ...
)
}
\arguments{
\item{mode}{A single character string for the type of model.
The only possible value for this model is "classification".}

\item{trees}{A non-negative integer (no greater than 100 for the number
of members of the ensemble.}

\item{min_n}{An integer greater than one zero and nine for the minimum number
of data points in a node that are required for the node to be split further.}

\item{object}{A \code{C5_rules} model specification.}
}
\description{
\code{\link[=C5_rules]{C5_rules()}} is a way to generate a \emph{specification} of a model
before fitting. The main arguments for the model are:
\itemize{
\item \code{trees}: The number of sequential models included in the
ensemble (rules are derived from an initial set of boosted trees).
\item \code{min_n}: The minimum number of data points in a node that are
required for the node to be split further.
}
These arguments are converted to their specific names at the
time that the model is fit. Other options and argument can be
set using \code{\link[parsnip:set_engine]{parsnip::set_engine()}}. If left to their defaults
here (\code{NULL}), the values are taken from the underlying model
functions. If parameters need to be modified, \code{update()} can be used
in lieu of recreating the object from scratch.
}
\details{
The only availible engine is \code{"C5.0"}.
}
\section{Engine Details}{


Engines may have pre-set default arguments when executing the
model fit call. For this type of
model, the template of the fit calls are:

\pkg{C5.0}
}

\examples{
C5_rules()
# Parameters can be represented by a placeholder:
C5_rules(trees = 7)
model <- C5_rules(trees = 10, min_n = 2)
model
update(model, trees = 1)
update(model, trees = 1, fresh = TRUE)
}
\seealso{
\code{\link[parsnip:fit]{parsnip::fit()}}, \code{\link[parsnip:set_engine]{parsnip::set_engine()}}
}
